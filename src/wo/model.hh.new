//---------------------------------------------------------------------------
// VREng (Virtual Reality Engine)	http://vreng.enst.fr/
//
// Copyright (C) 1997-2008 Ecole Nationale Superieure des Telecommunications
//
// VREng is a free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public Licence as published by
// the Free Software Foundation; either version 2, or (at your option)
// any later version.
//
// VREng is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//---------------------------------------------------------------------------
#ifndef MODEL_HH
#define MODEL_HH

#include "wobject.hh"
#include "lwo.hh"	// LWO
#include "3ds.hh"	// 3DS
#include "ase.hh"	// ASE
#include "obj.hh"	// OBJ
#include "md2.hh"	// MD2
#include "dxf.hh"	// DXF

class LWO;
class _3DS;
class ASE;
class OBJ;
class MD2;
class DXF;

#define MODEL_TYPE 	46
#define MODEL_NAME 	"Model"


/**
 * Model class
 */
class Model: public WObject {

 private:
  static const float LSPEED; ///< default linear speed

  float lspeed;         ///< linear speed
  float aspeed;         ///< angular speed
  uint8_t model_t;	///< type of model
  float scale;		///< scale to apply
  bool taken;		///< taken or not by user
  bool transform;	///< transform or not
  int texid;		///< texture number
  char *texurl;		///< texture url
  char *sndurl;		///< sound url
  float color[3];	///< main color

  LWO*  lwo;		///< LWO Model pointer
  _3DS* _3ds;		///< 3DS Model pointer
  ASE*  ase;		///< ASE Model pointer
  OBJ*  obj;		///< OBJ Model pointer
  MD2*  md2;		///< MD2 Model pointer
  DXF*  dxf;		///< DXF Model pointer

 public:
  static const WClass wclass;	///< class variable

  virtual const WClass* getWClass() {return &wclass;}

  static void init();	///< init funclist

  Model(char *l);	///< Constructor

  Model(WObject *user, char *url, float _scale);     ///< Constructor from GUI

  static WObject * (creator)(char *l);
  /**< Creates from fileline */

  virtual bool isMoving();
  /**< Checks if is moving */

  virtual void changePosition(float lasting);
  /**< Imposed movement */

  virtual void updateTime(time_t s, time_t us, float *lasting);
  /**< Updates lasting time */

  virtual void render();
  /**< Renders the model */

  virtual void quit();
  /**< Quits */

 private:
  virtual void parser(char *l);
  /**< Parses */

  virtual void defaults();
  /**< Sets default values */

  virtual void makeSolid();
  /**< Builds solid geometry */

  virtual void setName();
  /**< Sets an implicited name */

  virtual void behavior();
  /**< Sets behavior flags */

  virtual void loader();
  /**< Loads the model */

  virtual void scaler();
  /**< Scales or not the model */

  virtual void drawer();
  /**< Draws the model */

  virtual void preRender();
  /**< Makes translations ans rotations */

  virtual void postRender();
  /**< Makes glPopMatrix */

  // GUI callbacks
  static void sound(Model *o, void *d, time_t s, time_t u);
};

#endif // MODEL_HH
